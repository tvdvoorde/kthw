# MINIKUBE LOCAL

# cd c:\users\ted.van.der.voorde\.kube

# kubectl exec -n kube-system -it kube-apiserver-docker-for-desktop cat /run/config/pki/ca.crt > ca.crt

# kubectl exec -n kube-system -it kube-apiserver-docker-for-desktop cat /run/config/pki/ca.key > ca.key

# kubectl exec  -n kube-system  -it kube-apiserver-docker-for-desktop /bin/sh

cat > role.yaml <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list","get"]
EOF

cat > binding.yaml <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dev-developer-binding
subjects:
  - kind: User
    name: dev
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer
  apiGroup: rbac.authorization.k8s.io
EOF

#BASH openssl genrsa -out dev.key 2048
#BASH openssl req -new -key dev.key -subj "/CN=dev" -out dev.csr
#BASH openssl x509 -req -in dev.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out dev.crt -days 1000

kubectl delete -f role.yaml
kubectl delete -f binding.yaml

#BASH curl https://localhost:6445/api/v1/namespaces/default/pods --key dev.key --cert dev.crt --cacert ca.crt --insecure


kubectl apply -f role.yaml
kubectl apply -f binding.yaml

#BASH curl https://localhost:6445/api/v1/namespaces/default/pods --key dev.key --cert dev.crt --cacert ca.crt --insecure

kubectl auth can-i get pods --as dev
kubectl auth can-i create pods --as dev
